// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pirmessage.proto

#include "pirmessage.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace pir_message {
template <typename>
PROTOBUF_CONSTEXPR EmptyParam::EmptyParam(
    ::_pbi::ConstantInitialized) {}
struct EmptyParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyParamDefaultTypeInternal() {}
  union {
    EmptyParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyParamDefaultTypeInternal _EmptyParam_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DBInfoRequest::DBInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dbname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBInfoRequestDefaultTypeInternal() {}
  union {
    DBInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBInfoRequestDefaultTypeInternal _DBInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DBInfo::DBInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_of_items_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.size_per_item_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBInfoDefaultTypeInternal() {}
  union {
    DBInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBInfoDefaultTypeInternal _DBInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PirParam_Config_messsage::PirParam_Config_messsage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.epparams_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.use_symmetric_)*/ false

  , /*decltype(_impl_.use_batching_)*/ false

  , /*decltype(_impl_.use_recursive_mod_switching_)*/ false

  , /*decltype(_impl_.d_)*/ 0u

  , /*decltype(_impl_.num_of_items_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.size_per_item_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PirParam_Config_messsageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PirParam_Config_messsageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PirParam_Config_messsageDefaultTypeInternal() {}
  union {
    PirParam_Config_messsage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PirParam_Config_messsageDefaultTypeInternal _PirParam_Config_messsage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RequestData::RequestData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gkey_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.query_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dbname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pirconfig_)*/nullptr
  , /*decltype(_impl_.requestid_)*/ 0u

  , /*decltype(_impl_.clientid_)*/ 0u
} {}
struct RequestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDataDefaultTypeInternal() {}
  union {
    RequestData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDataDefaultTypeInternal _RequestData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ResponseData::ResponseData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.requestid_)*/ 0u

  , /*decltype(_impl_.result_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDataDefaultTypeInternal() {}
  union {
    ResponseData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDataDefaultTypeInternal _ResponseData_default_instance_;
}  // namespace pir_message
static ::_pb::Metadata file_level_metadata_pirmessage_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_pirmessage_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_pirmessage_2eproto = nullptr;
const ::uint32_t TableStruct_pirmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pir_message::EmptyParam, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pir_message::DBInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pir_message::DBInfoRequest, _impl_.dbname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pir_message::DBInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pir_message::DBInfo, _impl_.num_of_items_),
    PROTOBUF_FIELD_OFFSET(::pir_message::DBInfo, _impl_.size_per_item_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pir_message::PirParam_Config_messsage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pir_message::PirParam_Config_messsage, _impl_.use_symmetric_),
    PROTOBUF_FIELD_OFFSET(::pir_message::PirParam_Config_messsage, _impl_.use_batching_),
    PROTOBUF_FIELD_OFFSET(::pir_message::PirParam_Config_messsage, _impl_.use_recursive_mod_switching_),
    PROTOBUF_FIELD_OFFSET(::pir_message::PirParam_Config_messsage, _impl_.num_of_items_),
    PROTOBUF_FIELD_OFFSET(::pir_message::PirParam_Config_messsage, _impl_.size_per_item_),
    PROTOBUF_FIELD_OFFSET(::pir_message::PirParam_Config_messsage, _impl_.d_),
    PROTOBUF_FIELD_OFFSET(::pir_message::PirParam_Config_messsage, _impl_.epparams_),
    PROTOBUF_FIELD_OFFSET(::pir_message::RequestData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pir_message::RequestData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pir_message::RequestData, _impl_.requestid_),
    PROTOBUF_FIELD_OFFSET(::pir_message::RequestData, _impl_.clientid_),
    PROTOBUF_FIELD_OFFSET(::pir_message::RequestData, _impl_.pirconfig_),
    PROTOBUF_FIELD_OFFSET(::pir_message::RequestData, _impl_.gkey_),
    PROTOBUF_FIELD_OFFSET(::pir_message::RequestData, _impl_.query_),
    PROTOBUF_FIELD_OFFSET(::pir_message::RequestData, _impl_.dbname_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pir_message::ResponseData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pir_message::ResponseData, _impl_.requestid_),
    PROTOBUF_FIELD_OFFSET(::pir_message::ResponseData, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::pir_message::ResponseData, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::pir_message::ResponseData, _impl_.data_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::pir_message::EmptyParam)},
        { 8, -1, -1, sizeof(::pir_message::DBInfoRequest)},
        { 17, -1, -1, sizeof(::pir_message::DBInfo)},
        { 27, -1, -1, sizeof(::pir_message::PirParam_Config_messsage)},
        { 42, 56, -1, sizeof(::pir_message::RequestData)},
        { 62, -1, -1, sizeof(::pir_message::ResponseData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::pir_message::_EmptyParam_default_instance_._instance,
    &::pir_message::_DBInfoRequest_default_instance_._instance,
    &::pir_message::_DBInfo_default_instance_._instance,
    &::pir_message::_PirParam_Config_messsage_default_instance_._instance,
    &::pir_message::_RequestData_default_instance_._instance,
    &::pir_message::_ResponseData_default_instance_._instance,
};
const char descriptor_table_protodef_pirmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020pirmessage.proto\022\013pir_message\"\014\n\nEmpty"
    "Param\"\037\n\rDBInfoRequest\022\016\n\006DBName\030\001 \001(\t\"5"
    "\n\006DBInfo\022\024\n\014Num_of_items\030\001 \001(\004\022\025\n\rSize_p"
    "er_item\030\002 \001(\004\"\266\001\n\030PirParam_Config_messsa"
    "ge\022\025\n\rUse_symmetric\030\001 \001(\010\022\024\n\014Use_batchin"
    "g\030\002 \001(\010\022#\n\033Use_recursive_mod_switching\030\003"
    " \001(\010\022\024\n\014Num_of_items\030\004 \001(\004\022\025\n\rSize_per_i"
    "tem\030\005 \001(\004\022\t\n\001D\030\006 \001(\r\022\020\n\010EPParams\030\007 \001(\014\"\231"
    "\001\n\013RequestData\022\021\n\tRequestId\030\001 \001(\r\022\020\n\010Cli"
    "entId\030\002 \001(\r\0228\n\tPirConfig\030\003 \001(\0132%.pir_mes"
    "sage.PirParam_Config_messsage\022\014\n\004Gkey\030\004 "
    "\001(\014\022\r\n\005Query\030\005 \001(\014\022\016\n\006DBName\030\006 \001(\t\"L\n\014Re"
    "sponseData\022\021\n\tRequestId\030\001 \001(\r\022\016\n\006Result\030"
    "\002 \001(\005\022\013\n\003Msg\030\003 \001(\t\022\014\n\004Data\030\004 \001(\0142\215\001\n\nPIR"
    "Service\022>\n\tGetDBInfo\022\032.pir_message.DBInf"
    "oRequest\032\023.pir_message.DBInfo\"\000\022\?\n\006GetPI"
    "R\022\030.pir_message.RequestData\032\031.pir_messag"
    "e.ResponseData\"\000B\017Z\r./pir_messageb\006proto"
    "3"
};
static ::absl::once_flag descriptor_table_pirmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pirmessage_2eproto = {
    false,
    false,
    721,
    descriptor_table_protodef_pirmessage_2eproto,
    "pirmessage.proto",
    &descriptor_table_pirmessage_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_pirmessage_2eproto::offsets,
    file_level_metadata_pirmessage_2eproto,
    file_level_enum_descriptors_pirmessage_2eproto,
    file_level_service_descriptors_pirmessage_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pirmessage_2eproto_getter() {
  return &descriptor_table_pirmessage_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pirmessage_2eproto(&descriptor_table_pirmessage_2eproto);
namespace pir_message {
// ===================================================================

class EmptyParam::_Internal {
 public:
};

EmptyParam::EmptyParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pir_message.EmptyParam)
}
EmptyParam::EmptyParam(const EmptyParam& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EmptyParam* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pir_message.EmptyParam)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyParam::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EmptyParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pirmessage_2eproto_getter, &descriptor_table_pirmessage_2eproto_once,
      file_level_metadata_pirmessage_2eproto[0]);
}
// ===================================================================

class DBInfoRequest::_Internal {
 public:
};

DBInfoRequest::DBInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pir_message.DBInfoRequest)
}
DBInfoRequest::DBInfoRequest(const DBInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dbname_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dbname().empty()) {
    _this->_impl_.dbname_.Set(from._internal_dbname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pir_message.DBInfoRequest)
}

inline void DBInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.dbname_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBInfoRequest::~DBInfoRequest() {
  // @@protoc_insertion_point(destructor:pir_message.DBInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dbname_.Destroy();
}

void DBInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pir_message.DBInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dbname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string DBName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dbname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pir_message.DBInfoRequest.DBName"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DBInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pir_message.DBInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string DBName = 1;
  if (!this->_internal_dbname().empty()) {
    const std::string& _s = this->_internal_dbname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pir_message.DBInfoRequest.DBName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pir_message.DBInfoRequest)
  return target;
}

::size_t DBInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pir_message.DBInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DBName = 1;
  if (!this->_internal_dbname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dbname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBInfoRequest::GetClassData() const { return &_class_data_; }


void DBInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBInfoRequest*>(&to_msg);
  auto& from = static_cast<const DBInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pir_message.DBInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dbname().empty()) {
    _this->_internal_set_dbname(from._internal_dbname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBInfoRequest::CopyFrom(const DBInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pir_message.DBInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBInfoRequest::IsInitialized() const {
  return true;
}

void DBInfoRequest::InternalSwap(DBInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dbname_, lhs_arena,
                                       &other->_impl_.dbname_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pirmessage_2eproto_getter, &descriptor_table_pirmessage_2eproto_once,
      file_level_metadata_pirmessage_2eproto[1]);
}
// ===================================================================

class DBInfo::_Internal {
 public:
};

DBInfo::DBInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pir_message.DBInfo)
}
DBInfo::DBInfo(const DBInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pir_message.DBInfo)
}

inline void DBInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.num_of_items_) { ::uint64_t{0u} }

    , decltype(_impl_.size_per_item_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBInfo::~DBInfo() {
  // @@protoc_insertion_point(destructor:pir_message.DBInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pir_message.DBInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_of_items_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.size_per_item_) -
      reinterpret_cast<char*>(&_impl_.num_of_items_)) + sizeof(_impl_.size_per_item_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Num_of_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.num_of_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 Size_per_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.size_per_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DBInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pir_message.DBInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Num_of_items = 1;
  if (this->_internal_num_of_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_num_of_items(), target);
  }

  // uint64 Size_per_item = 2;
  if (this->_internal_size_per_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_size_per_item(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pir_message.DBInfo)
  return target;
}

::size_t DBInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pir_message.DBInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Num_of_items = 1;
  if (this->_internal_num_of_items() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_num_of_items());
  }

  // uint64 Size_per_item = 2;
  if (this->_internal_size_per_item() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_size_per_item());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBInfo::GetClassData() const { return &_class_data_; }


void DBInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBInfo*>(&to_msg);
  auto& from = static_cast<const DBInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pir_message.DBInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_of_items() != 0) {
    _this->_internal_set_num_of_items(from._internal_num_of_items());
  }
  if (from._internal_size_per_item() != 0) {
    _this->_internal_set_size_per_item(from._internal_size_per_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBInfo::CopyFrom(const DBInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pir_message.DBInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBInfo::IsInitialized() const {
  return true;
}

void DBInfo::InternalSwap(DBInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBInfo, _impl_.size_per_item_)
      + sizeof(DBInfo::_impl_.size_per_item_)
      - PROTOBUF_FIELD_OFFSET(DBInfo, _impl_.num_of_items_)>(
          reinterpret_cast<char*>(&_impl_.num_of_items_),
          reinterpret_cast<char*>(&other->_impl_.num_of_items_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pirmessage_2eproto_getter, &descriptor_table_pirmessage_2eproto_once,
      file_level_metadata_pirmessage_2eproto[2]);
}
// ===================================================================

class PirParam_Config_messsage::_Internal {
 public:
};

PirParam_Config_messsage::PirParam_Config_messsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pir_message.PirParam_Config_messsage)
}
PirParam_Config_messsage::PirParam_Config_messsage(const PirParam_Config_messsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PirParam_Config_messsage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.epparams_) {}

    , decltype(_impl_.use_symmetric_) {}

    , decltype(_impl_.use_batching_) {}

    , decltype(_impl_.use_recursive_mod_switching_) {}

    , decltype(_impl_.d_) {}

    , decltype(_impl_.num_of_items_) {}

    , decltype(_impl_.size_per_item_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.epparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.epparams_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_epparams().empty()) {
    _this->_impl_.epparams_.Set(from._internal_epparams(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.use_symmetric_, &from._impl_.use_symmetric_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.size_per_item_) -
    reinterpret_cast<char*>(&_impl_.use_symmetric_)) + sizeof(_impl_.size_per_item_));
  // @@protoc_insertion_point(copy_constructor:pir_message.PirParam_Config_messsage)
}

inline void PirParam_Config_messsage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.epparams_) {}

    , decltype(_impl_.use_symmetric_) { false }

    , decltype(_impl_.use_batching_) { false }

    , decltype(_impl_.use_recursive_mod_switching_) { false }

    , decltype(_impl_.d_) { 0u }

    , decltype(_impl_.num_of_items_) { ::uint64_t{0u} }

    , decltype(_impl_.size_per_item_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.epparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.epparams_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PirParam_Config_messsage::~PirParam_Config_messsage() {
  // @@protoc_insertion_point(destructor:pir_message.PirParam_Config_messsage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PirParam_Config_messsage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.epparams_.Destroy();
}

void PirParam_Config_messsage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PirParam_Config_messsage::Clear() {
// @@protoc_insertion_point(message_clear_start:pir_message.PirParam_Config_messsage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.epparams_.ClearToEmpty();
  ::memset(&_impl_.use_symmetric_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.size_per_item_) -
      reinterpret_cast<char*>(&_impl_.use_symmetric_)) + sizeof(_impl_.size_per_item_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PirParam_Config_messsage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Use_symmetric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.use_symmetric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool Use_batching = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.use_batching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool Use_recursive_mod_switching = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.use_recursive_mod_switching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 Num_of_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.num_of_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 Size_per_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.size_per_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 D = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes EPParams = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_epparams();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PirParam_Config_messsage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pir_message.PirParam_Config_messsage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Use_symmetric = 1;
  if (this->_internal_use_symmetric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_use_symmetric(), target);
  }

  // bool Use_batching = 2;
  if (this->_internal_use_batching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_use_batching(), target);
  }

  // bool Use_recursive_mod_switching = 3;
  if (this->_internal_use_recursive_mod_switching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_use_recursive_mod_switching(), target);
  }

  // uint64 Num_of_items = 4;
  if (this->_internal_num_of_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_num_of_items(), target);
  }

  // uint64 Size_per_item = 5;
  if (this->_internal_size_per_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_size_per_item(), target);
  }

  // uint32 D = 6;
  if (this->_internal_d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_d(), target);
  }

  // bytes EPParams = 7;
  if (!this->_internal_epparams().empty()) {
    const std::string& _s = this->_internal_epparams();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pir_message.PirParam_Config_messsage)
  return target;
}

::size_t PirParam_Config_messsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pir_message.PirParam_Config_messsage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes EPParams = 7;
  if (!this->_internal_epparams().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_epparams());
  }

  // bool Use_symmetric = 1;
  if (this->_internal_use_symmetric() != 0) {
    total_size += 2;
  }

  // bool Use_batching = 2;
  if (this->_internal_use_batching() != 0) {
    total_size += 2;
  }

  // bool Use_recursive_mod_switching = 3;
  if (this->_internal_use_recursive_mod_switching() != 0) {
    total_size += 2;
  }

  // uint32 D = 6;
  if (this->_internal_d() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_d());
  }

  // uint64 Num_of_items = 4;
  if (this->_internal_num_of_items() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_num_of_items());
  }

  // uint64 Size_per_item = 5;
  if (this->_internal_size_per_item() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_size_per_item());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PirParam_Config_messsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PirParam_Config_messsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PirParam_Config_messsage::GetClassData() const { return &_class_data_; }


void PirParam_Config_messsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PirParam_Config_messsage*>(&to_msg);
  auto& from = static_cast<const PirParam_Config_messsage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pir_message.PirParam_Config_messsage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_epparams().empty()) {
    _this->_internal_set_epparams(from._internal_epparams());
  }
  if (from._internal_use_symmetric() != 0) {
    _this->_internal_set_use_symmetric(from._internal_use_symmetric());
  }
  if (from._internal_use_batching() != 0) {
    _this->_internal_set_use_batching(from._internal_use_batching());
  }
  if (from._internal_use_recursive_mod_switching() != 0) {
    _this->_internal_set_use_recursive_mod_switching(from._internal_use_recursive_mod_switching());
  }
  if (from._internal_d() != 0) {
    _this->_internal_set_d(from._internal_d());
  }
  if (from._internal_num_of_items() != 0) {
    _this->_internal_set_num_of_items(from._internal_num_of_items());
  }
  if (from._internal_size_per_item() != 0) {
    _this->_internal_set_size_per_item(from._internal_size_per_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PirParam_Config_messsage::CopyFrom(const PirParam_Config_messsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pir_message.PirParam_Config_messsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PirParam_Config_messsage::IsInitialized() const {
  return true;
}

void PirParam_Config_messsage::InternalSwap(PirParam_Config_messsage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.epparams_, lhs_arena,
                                       &other->_impl_.epparams_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PirParam_Config_messsage, _impl_.size_per_item_)
      + sizeof(PirParam_Config_messsage::_impl_.size_per_item_)
      - PROTOBUF_FIELD_OFFSET(PirParam_Config_messsage, _impl_.use_symmetric_)>(
          reinterpret_cast<char*>(&_impl_.use_symmetric_),
          reinterpret_cast<char*>(&other->_impl_.use_symmetric_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PirParam_Config_messsage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pirmessage_2eproto_getter, &descriptor_table_pirmessage_2eproto_once,
      file_level_metadata_pirmessage_2eproto[3]);
}
// ===================================================================

class RequestData::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RequestData, _impl_._has_bits_);
  static const ::pir_message::PirParam_Config_messsage& pirconfig(const RequestData* msg);
  static void set_has_pirconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pir_message::PirParam_Config_messsage&
RequestData::_Internal::pirconfig(const RequestData* msg) {
  return *msg->_impl_.pirconfig_;
}
RequestData::RequestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pir_message.RequestData)
}
RequestData::RequestData(const RequestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gkey_) {}

    , decltype(_impl_.query_) {}

    , decltype(_impl_.dbname_) {}

    , decltype(_impl_.pirconfig_){nullptr}
    , decltype(_impl_.requestid_) {}

    , decltype(_impl_.clientid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gkey().empty()) {
    _this->_impl_.gkey_.Set(from._internal_gkey(), _this->GetArenaForAllocation());
  }
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), _this->GetArenaForAllocation());
  }
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dbname().empty()) {
    _this->_impl_.dbname_.Set(from._internal_dbname(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pirconfig_ = new ::pir_message::PirParam_Config_messsage(*from._impl_.pirconfig_);
  }
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.clientid_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.clientid_));
  // @@protoc_insertion_point(copy_constructor:pir_message.RequestData)
}

inline void RequestData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gkey_) {}

    , decltype(_impl_.query_) {}

    , decltype(_impl_.dbname_) {}

    , decltype(_impl_.pirconfig_){nullptr}
    , decltype(_impl_.requestid_) { 0u }

    , decltype(_impl_.clientid_) { 0u }

  };
  _impl_.gkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dbname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dbname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestData::~RequestData() {
  // @@protoc_insertion_point(destructor:pir_message.RequestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gkey_.Destroy();
  _impl_.query_.Destroy();
  _impl_.dbname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pirconfig_;
}

void RequestData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:pir_message.RequestData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gkey_.ClearToEmpty();
  _impl_.query_.ClearToEmpty();
  _impl_.dbname_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pirconfig_ != nullptr);
    _impl_.pirconfig_->Clear();
  }
  ::memset(&_impl_.requestid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.clientid_) -
      reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.clientid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RequestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 ClientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .pir_message.PirParam_Config_messsage PirConfig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pirconfig(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes Gkey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_gkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes Query = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string DBName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_dbname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pir_message.RequestData.DBName"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pir_message.RequestData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RequestId = 1;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_requestid(), target);
  }

  // uint32 ClientId = 2;
  if (this->_internal_clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_clientid(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .pir_message.PirParam_Config_messsage PirConfig = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pirconfig(this),
        _Internal::pirconfig(this).GetCachedSize(), target, stream);
  }

  // bytes Gkey = 4;
  if (!this->_internal_gkey().empty()) {
    const std::string& _s = this->_internal_gkey();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bytes Query = 5;
  if (!this->_internal_query().empty()) {
    const std::string& _s = this->_internal_query();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // string DBName = 6;
  if (!this->_internal_dbname().empty()) {
    const std::string& _s = this->_internal_dbname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pir_message.RequestData.DBName");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pir_message.RequestData)
  return target;
}

::size_t RequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pir_message.RequestData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Gkey = 4;
  if (!this->_internal_gkey().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_gkey());
  }

  // bytes Query = 5;
  if (!this->_internal_query().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_query());
  }

  // string DBName = 6;
  if (!this->_internal_dbname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dbname());
  }

  // .pir_message.PirParam_Config_messsage PirConfig = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pirconfig_);
  }

  // uint32 RequestId = 1;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_requestid());
  }

  // uint32 ClientId = 2;
  if (this->_internal_clientid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestData::GetClassData() const { return &_class_data_; }


void RequestData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestData*>(&to_msg);
  auto& from = static_cast<const RequestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pir_message.RequestData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gkey().empty()) {
    _this->_internal_set_gkey(from._internal_gkey());
  }
  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  if (!from._internal_dbname().empty()) {
    _this->_internal_set_dbname(from._internal_dbname());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pirconfig()->::pir_message::PirParam_Config_messsage::MergeFrom(
        from._internal_pirconfig());
  }
  if (from._internal_requestid() != 0) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  if (from._internal_clientid() != 0) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestData::CopyFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pir_message.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestData::IsInitialized() const {
  return true;
}

void RequestData::InternalSwap(RequestData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gkey_, lhs_arena,
                                       &other->_impl_.gkey_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.query_, lhs_arena,
                                       &other->_impl_.query_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dbname_, lhs_arena,
                                       &other->_impl_.dbname_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestData, _impl_.clientid_)
      + sizeof(RequestData::_impl_.clientid_)
      - PROTOBUF_FIELD_OFFSET(RequestData, _impl_.pirconfig_)>(
          reinterpret_cast<char*>(&_impl_.pirconfig_),
          reinterpret_cast<char*>(&other->_impl_.pirconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pirmessage_2eproto_getter, &descriptor_table_pirmessage_2eproto_once,
      file_level_metadata_pirmessage_2eproto[4]);
}
// ===================================================================

class ResponseData::_Internal {
 public:
};

ResponseData::ResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pir_message.ResponseData)
}
ResponseData::ResponseData(const ResponseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.requestid_) {}

    , decltype(_impl_.result_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.requestid_, &from._impl_.requestid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:pir_message.ResponseData)
}

inline void ResponseData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.requestid_) { 0u }

    , decltype(_impl_.result_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseData::~ResponseData() {
  // @@protoc_insertion_point(destructor:pir_message.ResponseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.data_.Destroy();
}

void ResponseData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:pir_message.ResponseData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.requestid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.requestid_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RequestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 Result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string Msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pir_message.ResponseData.Msg"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes Data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ResponseData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pir_message.ResponseData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RequestId = 1;
  if (this->_internal_requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_requestid(), target);
  }

  // int32 Result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_result(), target);
  }

  // string Msg = 3;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pir_message.ResponseData.Msg");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bytes Data = 4;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pir_message.ResponseData)
  return target;
}

::size_t ResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pir_message.ResponseData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // bytes Data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // uint32 RequestId = 1;
  if (this->_internal_requestid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_requestid());
  }

  // int32 Result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseData::GetClassData() const { return &_class_data_; }


void ResponseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseData*>(&to_msg);
  auto& from = static_cast<const ResponseData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pir_message.ResponseData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_requestid() != 0) {
    _this->_internal_set_requestid(from._internal_requestid());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseData::CopyFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pir_message.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseData::IsInitialized() const {
  return true;
}

void ResponseData::InternalSwap(ResponseData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, lhs_arena,
                                       &other->_impl_.msg_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseData, _impl_.result_)
      + sizeof(ResponseData::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(ResponseData, _impl_.requestid_)>(
          reinterpret_cast<char*>(&_impl_.requestid_),
          reinterpret_cast<char*>(&other->_impl_.requestid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pirmessage_2eproto_getter, &descriptor_table_pirmessage_2eproto_once,
      file_level_metadata_pirmessage_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pir_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pir_message::EmptyParam*
Arena::CreateMaybeMessage< ::pir_message::EmptyParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pir_message::EmptyParam >(arena);
}
template<> PROTOBUF_NOINLINE ::pir_message::DBInfoRequest*
Arena::CreateMaybeMessage< ::pir_message::DBInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pir_message::DBInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pir_message::DBInfo*
Arena::CreateMaybeMessage< ::pir_message::DBInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pir_message::DBInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pir_message::PirParam_Config_messsage*
Arena::CreateMaybeMessage< ::pir_message::PirParam_Config_messsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pir_message::PirParam_Config_messsage >(arena);
}
template<> PROTOBUF_NOINLINE ::pir_message::RequestData*
Arena::CreateMaybeMessage< ::pir_message::RequestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pir_message::RequestData >(arena);
}
template<> PROTOBUF_NOINLINE ::pir_message::ResponseData*
Arena::CreateMaybeMessage< ::pir_message::ResponseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pir_message::ResponseData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
