// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pirmessage.proto

#include "pirmessage.pb.h"
#include "pirmessage.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace pir_message {

static const char* PIRService_method_names[] = {
  "/pir_message.PIRService/GetDBInfo",
  "/pir_message.PIRService/GetPIR",
};

std::unique_ptr< PIRService::Stub> PIRService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PIRService::Stub> stub(new PIRService::Stub(channel, options));
  return stub;
}

PIRService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetDBInfo_(PIRService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPIR_(PIRService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PIRService::Stub::GetDBInfo(::grpc::ClientContext* context, const ::pir_message::DBInfoRequest& request, ::pir_message::DBInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pir_message::DBInfoRequest, ::pir_message::DBInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDBInfo_, context, request, response);
}

void PIRService::Stub::async::GetDBInfo(::grpc::ClientContext* context, const ::pir_message::DBInfoRequest* request, ::pir_message::DBInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pir_message::DBInfoRequest, ::pir_message::DBInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDBInfo_, context, request, response, std::move(f));
}

void PIRService::Stub::async::GetDBInfo(::grpc::ClientContext* context, const ::pir_message::DBInfoRequest* request, ::pir_message::DBInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDBInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pir_message::DBInfo>* PIRService::Stub::PrepareAsyncGetDBInfoRaw(::grpc::ClientContext* context, const ::pir_message::DBInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pir_message::DBInfo, ::pir_message::DBInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDBInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pir_message::DBInfo>* PIRService::Stub::AsyncGetDBInfoRaw(::grpc::ClientContext* context, const ::pir_message::DBInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDBInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PIRService::Stub::GetPIR(::grpc::ClientContext* context, const ::pir_message::RequestData& request, ::pir_message::ResponseData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pir_message::RequestData, ::pir_message::ResponseData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPIR_, context, request, response);
}

void PIRService::Stub::async::GetPIR(::grpc::ClientContext* context, const ::pir_message::RequestData* request, ::pir_message::ResponseData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pir_message::RequestData, ::pir_message::ResponseData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPIR_, context, request, response, std::move(f));
}

void PIRService::Stub::async::GetPIR(::grpc::ClientContext* context, const ::pir_message::RequestData* request, ::pir_message::ResponseData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPIR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pir_message::ResponseData>* PIRService::Stub::PrepareAsyncGetPIRRaw(::grpc::ClientContext* context, const ::pir_message::RequestData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pir_message::ResponseData, ::pir_message::RequestData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPIR_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pir_message::ResponseData>* PIRService::Stub::AsyncGetPIRRaw(::grpc::ClientContext* context, const ::pir_message::RequestData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPIRRaw(context, request, cq);
  result->StartCall();
  return result;
}

PIRService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PIRService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PIRService::Service, ::pir_message::DBInfoRequest, ::pir_message::DBInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PIRService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pir_message::DBInfoRequest* req,
             ::pir_message::DBInfo* resp) {
               return service->GetDBInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PIRService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PIRService::Service, ::pir_message::RequestData, ::pir_message::ResponseData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PIRService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pir_message::RequestData* req,
             ::pir_message::ResponseData* resp) {
               return service->GetPIR(ctx, req, resp);
             }, this)));
}

PIRService::Service::~Service() {
}

::grpc::Status PIRService::Service::GetDBInfo(::grpc::ServerContext* context, const ::pir_message::DBInfoRequest* request, ::pir_message::DBInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PIRService::Service::GetPIR(::grpc::ServerContext* context, const ::pir_message::RequestData* request, ::pir_message::ResponseData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pir_message

